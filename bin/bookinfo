#!/usr/bin/env ruby
# coding: utf-8
require 'yaml'
require 'optparse'
require 'logger'
require 'open-uri'

$LOAD_PATH.push(File.expand_path('../lib', File.dirname(__FILE__)))
require 'amazon'

Version = '1.0.0'

class BookInfo
  def initialize
    @log = Logger.new($stderr)
    @log.level = Logger::WARN
  end

  def run
    parse_options

    input = $stdin
    output = $stdout
    attrs = [:isbn, :title, :author, :manufacturer, :creators]
    isbn_list = input.read.split.map{|s| to_isbn13(s)}

    amazon = Amazon.new(read_config)
    write_header(output, attrs) if @header
    isbn_list.each do |isbn|
      10.times do
        begin
          info = amazon.lookup_book(isbn)
          if info
            @log.info "Book Info Fetched: #{info[:isbn]}"
            write_row(output, attrs, info)
            write_image(info[:isbn], info[:image_uri]) if info[:image_uri] && @image_prefix
          else
            @log.error "Failed to fetch info: #{isbn}"
          end
          break
        rescue OpenURI::HTTPError
          sleep 1
        end
      end
    end
  end

  def parse_options
    opt = OptionParser.new
    opt.on('-v', '--verbose', 'Output log') { @log.level = Logger::INFO }
    opt.on('--[no-]header', 'Output header') {|f| @header = f }
    opt.on('--fetch-images=PREFIX', 'Specify image download directory') {|str| @image_prefix = str }
    opt.parse!(ARGV)
  end

  def read_config
    YAML.load(IO.read(File.expand_path('../config/amazon.yml', File.dirname(__FILE__))))
  end

  def to_isbn13(s)
    s = s.strip
    if s.size == 10
      s = "978" + s[0..8]
      weights = [1, 3] * 6
      sum = 0
      s.size.times do |i|
        sum += s[i].to_i * weights[i]
      end
      c = (10 - sum % 10) % 10
      s + c.to_s
    else
      s
    end
  end

  def write_header(output, attrs)
    output.puts attrs.join("\t")
  end

  def write_row(output, attrs, info)
    output.puts info.values_at(*attrs).join("\t")
  end

  def write_image(isbn, image_uri)
    open(image_uri) do |image_input|
      image = image_input.read
      image_filename = File.join(@image_prefix, "#{isbn}#{File.extname(image_uri)}")
      open(image_filename, 'wb') do |image_output|
        @log.info "Image Fetched: #{image_uri}"
        image_output.write(image)
      end
    end
  rescue OpenURI::HTTPError
    # do nothing
  end
end

BookInfo.new.run
